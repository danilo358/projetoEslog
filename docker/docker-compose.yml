version: "3.9"

services:
  postgres:
    image: postgis/postgis:16-3.4
    container_name: pg-bi-meio-ambiente
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      TZ: America/Campo_Grande
    ports:
      # Porta externa 5433 -> interna 5432 (ok para acessar do host)
      - "5433:5432"
    volumes:
      # Dados persistentes e scripts de init (.sql) rodam automaticamente
      - ./db/data:/var/lib/postgresql/data
      - ./db/init:/docker-entrypoint-initdb.d:ro
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB} || exit 1"]
      interval: 5s
      timeout: 5s
      retries: 20
      start_period: 10s

  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: pgadmin-bi-meio-ambiente
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
      TZ: America/Campo_Grande
    ports:
      - "8081:80"
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped

  etl:
    # Build do diretório do ETL (ajuste se o Dockerfile estiver em outro caminho)
    build:
      context: ../etl
    container_name: etl-bi-meio-ambiente

    # Carrega variáveis do .env do ETL (mantém segredos e defaults)
    env_file:
      - ../etl/.env

    # Overrides CRÍTICOS (garantem conexão correta e login da API mesmo que o .env esteja errado)
    environment:
      # ===== Conexão ao Postgres na REDE do compose =====
      # Dentro da rede do compose, o host é o NOME DO SERVIÇO "postgres" (não use localhost aqui).
      # Forçamos sslmode=disable para evitar "server does not support SSL, but SSL was required".
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}?sslmode=disable

      # Mantemos também as variáveis discretas (usadas se DATABASE_URL não estiver setada)
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ${POSTGRES_DB}
      DB_USER: ${POSTGRES_USER}
      DB_PASS: ${POSTGRES_PASSWORD}
      DB_SSLMODE: disable

      # ===== API Externa =====
      API_BASE_URL: ${API_BASE_URL}
      CLIENT_INTEGRATION_CODE: ${CLIENT_INTEGRATION_CODE}
      AUTH_LOGIN_PATH: ${AUTH_LOGIN_PATH}
      AUTH_USER: ${AUTH_USER}
      AUTH_PASS: ${AUTH_PASS}
      AUTH_HASH: ${AUTH_HASH}
      GET_LAST_POSITIONS_PATH: ${GET_LAST_POSITIONS_PATH}

      AUTH_QUERY_USER_KEY: ${AUTH_QUERY_USER_KEY}
      AUTH_QUERY_PASS_KEY: ${AUTH_QUERY_PASS_KEY}
      AUTH_QUERY_HASH_KEY: ${AUTH_QUERY_HASH_KEY}

      # ===== Operação =====
      FREQUENCIA_SEGUNDOS: ${FREQUENCIA_SEGUNDOS:-300}
      API_PAGE_MAX: ${API_PAGE_MAX:-1000}
      TOLERANCIA_VARIACAO_PERCENT: ${TOLERANCIA_VARIACAO_PERCENT:-10}
      EVENT_RADIUS_METERS: ${EVENT_RADIUS_METERS:-50}
      EVENT_COOLDOWN_MIN: ${EVENT_COOLDOWN_MIN:-30}
      DEBUG_HTTP: ${DEBUG_HTTP:-0}
      DISABLE_EVENT_GUARDS: ${DISABLE_EVENT_GUARDS:-0}

      TZ: America/Campo_Grande

    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
